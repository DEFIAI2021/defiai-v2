/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BSCPoolInterface extends utils.Interface {
  contractName: "BSCPool";
  functions: {
    "LpOfPid(address)": FunctionFragment;
    "add(uint256,address,bool)": FunctionFragment;
    "addBadAddress(address)": FunctionFragment;
    "addMultLP(address)": FunctionFragment;
    "delBadAddress(address)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "getBadAddress(uint256)": FunctionFragment;
    "getBlackListLength()": FunctionFragment;
    "getMdxBlockReward(uint256)": FunctionFragment;
    "getMultLPAddress(uint256)": FunctionFragment;
    "getMultLPLength()": FunctionFragment;
    "halvingPeriod()": FunctionFragment;
    "isBadAddress(address)": FunctionFragment;
    "isMultLP(address)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "mdx()": FunctionFragment;
    "mdxPerBlock()": FunctionFragment;
    "multLpChef()": FunctionFragment;
    "multLpToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pending(uint256,address)": FunctionFragment;
    "phase(uint256)": FunctionFragment;
    "poolCorrespond(uint256)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replaceMultLP(address,address)": FunctionFragment;
    "reward(uint256)": FunctionFragment;
    "set(uint256,uint256,bool)": FunctionFragment;
    "setHalvingPeriod(uint256)": FunctionFragment;
    "setMdxPerBlock(uint256)": FunctionFragment;
    "setMultLP(address,address)": FunctionFragment;
    "setPause()": FunctionFragment;
    "setPoolCorr(uint256,uint256)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "LpOfPid", values: [string]): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addBadAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addMultLP", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delBadAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBadAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMdxBlockReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultLPAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultLPLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "halvingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBadAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isMultLP", values: [string]): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mdx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mdxPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multLpChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multLpToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pending",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "phase", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "poolCorrespond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replaceMultLP",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setHalvingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMdxPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultLP",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPoolCorr",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "LpOfPid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMultLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delBadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMdxBlockReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultLPAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultLPLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "halvingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMultLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mdx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mdxPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multLpChef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multLpToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pending", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolCorrespond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceMultLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHalvingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMdxPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMultLP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPoolCorr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; pid: BigNumber; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; pid: BigNumber; amount: BigNumber }
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; pid: BigNumber; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface BSCPool extends BaseContract {
  contractName: "BSCPool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BSCPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LpOfPid(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBadAddress(
      _bad: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMultLP(
      _addLP: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delBadAddress(
      _bad: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBadAddress(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBlackListLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMdxBlockReward(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMultLPAddress(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMultLPLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    halvingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    isBadAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMultLP(_LP: string, overrides?: CallOverrides): Promise<[boolean]>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mdx(overrides?: CallOverrides): Promise<[string]>;

    mdxPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    multLpChef(overrides?: CallOverrides): Promise<[string]>;

    multLpToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pending(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    phase(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolCorrespond(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accMdxPerShare: BigNumber;
        accMultLpPerShare: BigNumber;
        totalAmount: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replaceMultLP(
      _multLpToken: string,
      _multLpChef: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reward(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHalvingPeriod(
      _block: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMdxPerBlock(
      newPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultLP(
      _multLpToken: string,
      _multLpChef: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolCorr(
      _pid: BigNumberish,
      _sid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        multLpRewardDebt: BigNumber;
      }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LpOfPid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  add(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBadAddress(
    _bad: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMultLP(
    _addLP: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delBadAddress(
    _bad: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBadAddress(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBlackListLength(overrides?: CallOverrides): Promise<BigNumber>;

  getMdxBlockReward(
    _lastRewardBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMultLPAddress(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMultLPLength(overrides?: CallOverrides): Promise<BigNumber>;

  halvingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  isBadAddress(account: string, overrides?: CallOverrides): Promise<boolean>;

  isMultLP(_LP: string, overrides?: CallOverrides): Promise<boolean>;

  massUpdatePools(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mdx(overrides?: CallOverrides): Promise<string>;

  mdxPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  multLpChef(overrides?: CallOverrides): Promise<string>;

  multLpToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pending(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  phase(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolCorrespond(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accMdxPerShare: BigNumber;
      accMultLpPerShare: BigNumber;
      totalAmount: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replaceMultLP(
    _multLpToken: string,
    _multLpChef: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reward(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHalvingPeriod(
    _block: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMdxPerBlock(
    newPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultLP(
    _multLpToken: string,
    _multLpChef: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolCorr(
    _pid: BigNumberish,
    _sid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      multLpRewardDebt: BigNumber;
    }
  >;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LpOfPid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addBadAddress(_bad: string, overrides?: CallOverrides): Promise<boolean>;

    addMultLP(_addLP: string, overrides?: CallOverrides): Promise<boolean>;

    delBadAddress(_bad: string, overrides?: CallOverrides): Promise<boolean>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBadAddress(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBlackListLength(overrides?: CallOverrides): Promise<BigNumber>;

    getMdxBlockReward(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultLPAddress(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMultLPLength(overrides?: CallOverrides): Promise<BigNumber>;

    halvingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    isBadAddress(account: string, overrides?: CallOverrides): Promise<boolean>;

    isMultLP(_LP: string, overrides?: CallOverrides): Promise<boolean>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    mdx(overrides?: CallOverrides): Promise<string>;

    mdxPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    multLpChef(overrides?: CallOverrides): Promise<string>;

    multLpToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pending(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    phase(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCorrespond(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accMdxPerShare: BigNumber;
        accMultLpPerShare: BigNumber;
        totalAmount: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    replaceMultLP(
      _multLpToken: string,
      _multLpChef: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reward(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setHalvingPeriod(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMdxPerBlock(
      newPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultLP(
      _multLpToken: string,
      _multLpChef: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPause(overrides?: CallOverrides): Promise<void>;

    setPoolCorr(
      _pid: BigNumberish,
      _sid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        multLpRewardDebt: BigNumber;
      }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): DepositEventFilter;

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Withdraw(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    LpOfPid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBadAddress(
      _bad: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMultLP(
      _addLP: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delBadAddress(
      _bad: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBadAddress(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackListLength(overrides?: CallOverrides): Promise<BigNumber>;

    getMdxBlockReward(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultLPAddress(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultLPLength(overrides?: CallOverrides): Promise<BigNumber>;

    halvingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    isBadAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMultLP(_LP: string, overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mdx(overrides?: CallOverrides): Promise<BigNumber>;

    mdxPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    multLpChef(overrides?: CallOverrides): Promise<BigNumber>;

    multLpToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pending(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    phase(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCorrespond(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replaceMultLP(
      _multLpToken: string,
      _multLpChef: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reward(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHalvingPeriod(
      _block: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMdxPerBlock(
      newPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultLP(
      _multLpToken: string,
      _multLpChef: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolCorr(
      _pid: BigNumberish,
      _sid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LpOfPid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBadAddress(
      _bad: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMultLP(
      _addLP: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delBadAddress(
      _bad: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBadAddress(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackListLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMdxBlockReward(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultLPAddress(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultLPLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    halvingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBadAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMultLP(
      _LP: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mdx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mdxPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multLpChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multLpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pending(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    phase(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolCorrespond(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replaceMultLP(
      _multLpToken: string,
      _multLpChef: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reward(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHalvingPeriod(
      _block: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMdxPerBlock(
      newPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultLP(
      _multLpToken: string,
      _multLpChef: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolCorr(
      _pid: BigNumberish,
      _sid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
