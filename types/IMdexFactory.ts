/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IMdexFactoryInterface extends utils.Interface {
  contractName: "IMdexFactory";
  functions: {
    "FEE_RATE_DENOMINATOR()": FunctionFragment;
    "addPair(address)": FunctionFragment;
    "allPairs(uint256)": FunctionFragment;
    "allPairsLength()": FunctionFragment;
    "createPair(address,address)": FunctionFragment;
    "delPair(address)": FunctionFragment;
    "feeRateNumerator()": FunctionFragment;
    "feeTo()": FunctionFragment;
    "feeToRate()": FunctionFragment;
    "feeToSetter()": FunctionFragment;
    "getAmountIn(uint256,uint256,uint256,address,address)": FunctionFragment;
    "getAmountOut(uint256,uint256,uint256,address,address)": FunctionFragment;
    "getAmountsIn(uint256,address[])": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "getPairFees(address)": FunctionFragment;
    "getPairRate(address)": FunctionFragment;
    "getReserves(address,address)": FunctionFragment;
    "getSupportListLength()": FunctionFragment;
    "getSupportPair(uint256)": FunctionFragment;
    "initCodeHash()": FunctionFragment;
    "isSupportPair(address)": FunctionFragment;
    "pairFeeToRate(address)": FunctionFragment;
    "pairFees(address)": FunctionFragment;
    "pairFor(address,address)": FunctionFragment;
    "quote(uint256,uint256,uint256)": FunctionFragment;
    "setDefaultFeeToRate(uint256)": FunctionFragment;
    "setFeeRateNumerator(uint256)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setFeeToSetter(address)": FunctionFragment;
    "setPairFeeToRate(address,uint256)": FunctionFragment;
    "setPairFees(address,uint256)": FunctionFragment;
    "sortTokens(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FEE_RATE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addPair", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "delPair", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeRateNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeToRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeToSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getPairFees", values: [string]): string;
  encodeFunctionData(functionFragment: "getPairRate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportPair",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportPair",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pairFeeToRate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "pairFees", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pairFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultFeeToRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRateNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeToSetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairFeeToRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairFees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sortTokens",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_RATE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRateNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairFeeToRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultFeeToRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRateNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairFeeToRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sortTokens", data: BytesLike): Result;

  events: {
    "PairCreated(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
}

export type PairCreatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  { token0: string; token1: string; pair: string; arg3: BigNumber }
>;

export type PairCreatedEventFilter = TypedEventFilter<PairCreatedEvent>;

export interface IMdexFactory extends BaseContract {
  contractName: "IMdexFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMdexFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    addPair(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { pair: string }>;

    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delPair(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRateNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    feeToRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeToSetter(overrides?: CallOverrides): Promise<[string]>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string] & { pair: string }>;

    getPairFees(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPairRate(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reserveA: BigNumber; reserveB: BigNumber }
    >;

    getSupportListLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSupportPair(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initCodeHash(overrides?: CallOverrides): Promise<[string]>;

    isSupportPair(pair: string, overrides?: CallOverrides): Promise<[boolean]>;

    pairFeeToRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pairFees(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    pairFor(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string] & { pair: string }>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountB: BigNumber }>;

    setDefaultFeeToRate(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRateNumerator(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeTo(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeToSetter(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPairFeeToRate(
      pair: string,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPairFees(
      pair: string,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sortTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;
  };

  FEE_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  addPair(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    tokenA: string,
    tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delPair(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRateNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  feeToRate(overrides?: CallOverrides): Promise<BigNumber>;

  feeToSetter(overrides?: CallOverrides): Promise<string>;

  getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsIn(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPair(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPairFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPairRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getReserves(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { reserveA: BigNumber; reserveB: BigNumber }
  >;

  getSupportListLength(overrides?: CallOverrides): Promise<BigNumber>;

  getSupportPair(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initCodeHash(overrides?: CallOverrides): Promise<string>;

  isSupportPair(pair: string, overrides?: CallOverrides): Promise<boolean>;

  pairFeeToRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  pairFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  pairFor(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  quote(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setDefaultFeeToRate(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRateNumerator(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeTo(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeToSetter(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPairFeeToRate(
    pair: string,
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPairFees(
    pair: string,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sortTokens(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { token0: string; token1: string }>;

  callStatic: {
    FEE_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    addPair(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    delPair(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    feeRateNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    feeToRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeToSetter(overrides?: CallOverrides): Promise<string>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPairFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPairRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reserveA: BigNumber; reserveB: BigNumber }
    >;

    getSupportListLength(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportPair(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initCodeHash(overrides?: CallOverrides): Promise<string>;

    isSupportPair(pair: string, overrides?: CallOverrides): Promise<boolean>;

    pairFeeToRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pairFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pairFor(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultFeeToRate(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRateNumerator(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeTo(arg0: string, overrides?: CallOverrides): Promise<void>;

    setFeeToSetter(arg0: string, overrides?: CallOverrides): Promise<void>;

    setPairFeeToRate(
      pair: string,
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPairFees(
      pair: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sortTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;
  };

  filters: {
    "PairCreated(address,address,address,uint256)"(
      token0?: string | null,
      token1?: string | null,
      pair?: null,
      arg3?: null
    ): PairCreatedEventFilter;
    PairCreated(
      token0?: string | null,
      token1?: string | null,
      pair?: null,
      arg3?: null
    ): PairCreatedEventFilter;
  };

  estimateGas: {
    FEE_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    addPair(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delPair(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRateNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    feeToRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeToSetter(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPairRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportListLength(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportPair(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    isSupportPair(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    pairFeeToRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pairFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pairFor(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultFeeToRate(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRateNumerator(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeTo(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeToSetter(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPairFeeToRate(
      pair: string,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPairFees(
      pair: string,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sortTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_RATE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPair(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delPair(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRateNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToSetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportListLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportPair(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initCodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSupportPair(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairFeeToRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairFor(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefaultFeeToRate(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRateNumerator(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeToSetter(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPairFeeToRate(
      pair: string,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPairFees(
      pair: string,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sortTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
