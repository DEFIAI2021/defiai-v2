/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DeFiAIStableStratInterface extends utils.Interface {
  contractName: "DeFiAIStableStrat";
  functions: {
    "DIVISOR()": FunctionFragment;
    "SLIPPAGE_FACTOR_MAX()": FunctionFragment;
    "activePid()": FunctionFragment;
    "balances(address)": FunctionFragment;
    "busd()": FunctionFragment;
    "changeActiveStrategy(uint8)": FunctionFragment;
    "defiaiFarmAddress()": FunctionFragment;
    "deposit(address,uint256,address)": FunctionFragment;
    "devAddress()": FunctionFragment;
    "farmInfo(uint256)": FunctionFragment;
    "init(address[],uint256,address[],uint256,address[],uint256)": FunctionFragment;
    "isInit()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDevAddress(address)": FunctionFragment;
    "stratAddress()": FunctionFragment;
    "swapPid(address)": FunctionFragment;
    "swapRouterAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "usdt()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
    "withdrawalMultiplier()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DIVISOR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SLIPPAGE_FACTOR_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "activePid", values?: undefined): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "busd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeActiveStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defiaiFarmAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "devAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "farmInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      string[],
      BigNumberish,
      string[],
      BigNumberish,
      string[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "isInit", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDevAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stratAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "swapPid", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swapRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalMultiplier",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DIVISOR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SLIPPAGE_FACTOR_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activePid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "busd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeActiveStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defiaiFarmAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farmInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stratAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapPid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalMultiplier",
    data: BytesLike
  ): Result;

  events: {
    "ChangeActiveStrategy(uint8)": EventFragment;
    "Init(address[],uint256,address[],uint256,address[],uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SetDevAddress(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeActiveStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Init"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDevAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ChangeActiveStrategyEvent = TypedEvent<
  [number],
  { _newPid: number }
>;

export type ChangeActiveStrategyEventFilter =
  TypedEventFilter<ChangeActiveStrategyEvent>;

export type InitEvent = TypedEvent<
  [string[], BigNumber, string[], BigNumber, string[], BigNumber],
  {
    _pcsAddresses: string[];
    _pcsPid: BigNumber;
    _mdexAddresses: string[];
    _mdxPid: BigNumber;
    _bswAddresses: string[];
    _bswPid: BigNumber;
  }
>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type SetDevAddressEvent = TypedEvent<[string], { _devAddress: string }>;

export type SetDevAddressEventFilter = TypedEventFilter<SetDevAddressEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface DeFiAIStableStrat extends BaseContract {
  contractName: "DeFiAIStableStrat";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeFiAIStableStratInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    SLIPPAGE_FACTOR_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    activePid(overrides?: CallOverrides): Promise<[number]>;

    balances(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    busd(overrides?: CallOverrides): Promise<[string]>;

    changeActiveStrategy(
      _newPid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defiaiFarmAddress(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      user: string,
      _wantAmt: BigNumberish,
      _wantAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devAddress(overrides?: CallOverrides): Promise<[string]>;

    farmInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber, BigNumber] & {
        farmAddress: string;
        lpAddress: string;
        earnedAddress: string;
        routerAddress: string;
        pid: BigNumber;
        accumulatedTokenPerShare: BigNumber;
        totalShare: BigNumber;
      }
    >;

    init(
      _pcsAddresses: string[],
      _pcsPid: BigNumberish,
      _mdexAddresses: string[],
      _mdxPid: BigNumberish,
      _bswAddresses: string[],
      _bswPid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInit(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevAddress(
      _devAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stratAddress(overrides?: CallOverrides): Promise<[string]>;

    swapPid(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    swapRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdt(overrides?: CallOverrides): Promise<[string]>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balance: BigNumber;
        accumulatedClaimedToken: BigNumber;
      }
    >;

    withdraw(
      user: string,
      _wantAmt: BigNumberish,
      _wantAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  SLIPPAGE_FACTOR_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  activePid(overrides?: CallOverrides): Promise<number>;

  balances(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  busd(overrides?: CallOverrides): Promise<string>;

  changeActiveStrategy(
    _newPid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defiaiFarmAddress(overrides?: CallOverrides): Promise<string>;

  deposit(
    user: string,
    _wantAmt: BigNumberish,
    _wantAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devAddress(overrides?: CallOverrides): Promise<string>;

  farmInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, BigNumber, BigNumber] & {
      farmAddress: string;
      lpAddress: string;
      earnedAddress: string;
      routerAddress: string;
      pid: BigNumber;
      accumulatedTokenPerShare: BigNumber;
      totalShare: BigNumber;
    }
  >;

  init(
    _pcsAddresses: string[],
    _pcsPid: BigNumberish,
    _mdexAddresses: string[],
    _mdxPid: BigNumberish,
    _bswAddresses: string[],
    _bswPid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInit(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevAddress(
    _devAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stratAddress(overrides?: CallOverrides): Promise<string>;

  swapPid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  swapRouterAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdt(overrides?: CallOverrides): Promise<string>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      balance: BigNumber;
      accumulatedClaimedToken: BigNumber;
    }
  >;

  withdraw(
    user: string,
    _wantAmt: BigNumberish,
    _wantAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    SLIPPAGE_FACTOR_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    activePid(overrides?: CallOverrides): Promise<number>;

    balances(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    busd(overrides?: CallOverrides): Promise<string>;

    changeActiveStrategy(
      _newPid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    defiaiFarmAddress(overrides?: CallOverrides): Promise<string>;

    deposit(
      user: string,
      _wantAmt: BigNumberish,
      _wantAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<string>;

    farmInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber, BigNumber] & {
        farmAddress: string;
        lpAddress: string;
        earnedAddress: string;
        routerAddress: string;
        pid: BigNumber;
        accumulatedTokenPerShare: BigNumber;
        totalShare: BigNumber;
      }
    >;

    init(
      _pcsAddresses: string[],
      _pcsPid: BigNumberish,
      _mdexAddresses: string[],
      _mdxPid: BigNumberish,
      _bswAddresses: string[],
      _bswPid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isInit(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDevAddress(
      _devAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stratAddress(overrides?: CallOverrides): Promise<string>;

    swapPid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapRouterAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    usdt(overrides?: CallOverrides): Promise<string>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        balance: BigNumber;
        accumulatedClaimedToken: BigNumber;
      }
    >;

    withdraw(
      user: string,
      _wantAmt: BigNumberish,
      _wantAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalMultiplier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ChangeActiveStrategy(uint8)"(
      _newPid?: null
    ): ChangeActiveStrategyEventFilter;
    ChangeActiveStrategy(_newPid?: null): ChangeActiveStrategyEventFilter;

    "Init(address[],uint256,address[],uint256,address[],uint256)"(
      _pcsAddresses?: null,
      _pcsPid?: null,
      _mdexAddresses?: null,
      _mdxPid?: null,
      _bswAddresses?: null,
      _bswPid?: null
    ): InitEventFilter;
    Init(
      _pcsAddresses?: null,
      _pcsPid?: null,
      _mdexAddresses?: null,
      _mdxPid?: null,
      _bswAddresses?: null,
      _bswPid?: null
    ): InitEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SetDevAddress(address)"(_devAddress?: null): SetDevAddressEventFilter;
    SetDevAddress(_devAddress?: null): SetDevAddressEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    SLIPPAGE_FACTOR_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    activePid(overrides?: CallOverrides): Promise<BigNumber>;

    balances(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    busd(overrides?: CallOverrides): Promise<BigNumber>;

    changeActiveStrategy(
      _newPid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defiaiFarmAddress(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      user: string,
      _wantAmt: BigNumberish,
      _wantAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<BigNumber>;

    farmInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _pcsAddresses: string[],
      _pcsPid: BigNumberish,
      _mdexAddresses: string[],
      _mdxPid: BigNumberish,
      _bswAddresses: string[],
      _bswPid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInit(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevAddress(
      _devAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stratAddress(overrides?: CallOverrides): Promise<BigNumber>;

    swapPid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdt(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      user: string,
      _wantAmt: BigNumberish,
      _wantAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalMultiplier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SLIPPAGE_FACTOR_MAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activePid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balances(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    busd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeActiveStrategy(
      _newPid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defiaiFarmAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      user: string,
      _wantAmt: BigNumberish,
      _wantAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farmInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _pcsAddresses: string[],
      _pcsPid: BigNumberish,
      _mdexAddresses: string[],
      _mdxPid: BigNumberish,
      _bswAddresses: string[],
      _bswPid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevAddress(
      _devAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stratAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapPid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapRouterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      user: string,
      _wantAmt: BigNumberish,
      _wantAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
